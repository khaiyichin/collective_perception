include "body_common.bzz"

function init()
{
    # Initialize values
    reset_values()

    # Define listener callback function
    neighbors.listen("local_vals",
        function(vid, neighbor_local_val_table, rid) # each neighbor_local_val_table consists of x and conf
        {
            curr_neighbor_vals = append_to_table(curr_neighbor_vals, neighbor_local_val_table)
        }
    )
    
    ### Set custom seed that depends on the clock ###
    # This has to be done so that not all the robots are set to the same clock seed:
    #   * Default seed (i.e., clock) causes all the robots to be seeded the same, making them behave the same
    #   * Vanilla ID custom seed (i.e., `math.rng.setseed(id)`) causes deterministic behaviors across different trials
    # Solution: `math.rng.uniform()` is seeded by the clock, while `id` modifies the seed for the number generator used in the motion
    # Robots now all behave differently, across different trials.
    math.rng.setseed(id + math.rng.uniform())
}

function step()
{
    # Detect any nearby obstacles
    var obstacles = detect_obstacles()
    if (not obstacles)
    {
        # Move robot in random walk fashion
        if (not motion_disabled)
        {
            var movement = move(move_type, move_duration, rot_direction, spd)
            move_type = movement.type
            move_duration = movement.duration
            rot_direction = movement.rot_dir
        }
        else
        {
            gotop(0.0, 0.0) # stop robot
            move_status = 0 # not moving
        }

        # Make observation
        if (not sense_disabled)
        {
            encounter_observation_table = observe(b_prob, w_prob)

            debug_data["encounter"] = encounter_observation_table.encounter
            debug_data["observation"] = encounter_observation_table.observation

            total_b_tiles_obs = total_b_tiles_obs + encounter_observation_table.observation
            total_obs = total_obs + 1
        }
        else
        {
            sense_status = 0 # not sensing
        }
    }
    else
    {
        # Avoid obstacles
        if (not motion_disabled)
        {
            var movement = avoid_obstacles(spd, obstacles)
            move_type = movement.type
            move_duration = movement.duration
            rot_direction = movement.rot_dir
        }
        else
        {
            gotop(0.0, 0.0) # stop robot
            move_status = 0
        }
    }

    # Communicate
    if (not comms_disabled)
    {
        # Broadcast values
        communicate_tx("local_vals", local_vals)

        # Update values
        var neighbor_vals = {.past = past_neighbor_vals, .curr = curr_neighbor_vals}

        neighbor_vals = update_received_messages(neighbor_vals)

        # Update values
        past_neighbor_vals = neighbor_vals.past
        curr_neighbor_vals = neighbor_vals.curr
    }
    else
    {
        # Kill listener callback function
        neighbors.ignore("local_vals")
        comms_status = 0 # not communicating
    }
}

# Executed once when the robot (or the simulator) is reset.
function reset()
{
    reset_values()
}
 
# Executed once at the end of experiment.
function destroy() {}

##############################
### User defined functions ###
##############################

# Clear the robot values
function reset_values()
{
    # Define sensor accuracy variables, modified by the ARGoS loop functions
    b_prob = nil
    w_prob = nil

    # Define velocity variables, modified by the ARGoS loop functions
    spd = nil # cm/s

    # Define initial values, not modified by ARGoS loop functions
    local_vals = {.x = 0.5, .conf = 0.0}

    total_b_tiles_obs = 0
    total_obs = 0

    past_neighbor_vals = {}
    curr_neighbor_vals = {}

    move_type = nil
    move_duration = 0
    rot_direction = nil

    debug_data = {.encounter = 0, .observation = 0} # stored for debugging; not used in actual computation

    motion_disabled = 0
    comms_disabled = 0
    sense_disabled = 0

    move_status = 1
    comms_status = 1
    sense_status = 1
}